git status -h (use help for status action)
git status -s (display status in short version)
git log --oneline --graph  (display grapth)
_____________________________________
git hash-object  <file>   (hash object with sha1)
git log --oneline  (show history of commit with one line)
git show <commit id>


to display text in terminal:
	cat <file>
	less <file>
echo <text> >> <file>

_____________________________________

git log --oneline -<number_of_items_to_display>

(HEAD and ref directory in .git location)

git show HEAD ~<parent's parent's ...>

^ or ^1 first parent of commit
^2 seconf parent of commit
^^ first parent's first parent

git tag (view all tags)
git show v1.0 

simple tag:
	git tag  <tag-name> [<commit>]

annotiation tag:
	git tag -a [-m <message>|-f <file>] <tag-name> [<commit>]

git tag -d <tag-name>

git push <remote> <tagname>
git push <rempte> --tags (push all tags)

_____________________________________

git branch (display branches)
git branch <branch-name> (create branch)
git checkout <branch-name>

git ckeckout -b <branch-name> (create branch and checkout)

git branch -d <branch-name> (delete branch label if no commit exist )
git branch -D <branch-name> (delete branch lable if exist commit,and create Dangling commits)

undoing an accidental branch delete with git reflog
git reflog returns a local list of recent Head commits


git checkout -b <branch-name> <head-id_that reflog>  (to undo commits in new branch)

_____________________________________

git log --online --graph --all (view commit graph)


fast forward merge:
	if master do not have another commit

	git merge <branch-name>

perform a merge with a merge commit:
	git merge --no-ff <branch-name>

	and now you can delete branch:


A commit was made on the base branch after the topic branch was created.if master branch have comment then merge not be ff 

_____________________________________

git merge and solve merge conflict
if conflict exist:
	git status  
	subl <file_that-has-conflict>
	<modify file>
	git add <file_name>
	git commit [<message by default is merge message>]


_____________________________________

git branch -all (to view the local and tracking branch name)
git log --all --oneline  --graph (to view combined log of all local and tracking branch)
git remote set-head origin <branch-name> (change the default remote tracking branch )

78a38fd (featureY) some change in local branch
270dcd4 (origin/featureY, origin/HEAD) create file in local repo branch
56941e0 (HEAD -> master) change local repo
4e1802a (origin/master) Merge branch 'newfeature'
40f8e61 (newfeature) create conflict file in branch
6fbd009 create conflicted file


_____________________________________
network command:
clone
fetch
pull
push

fetch:
	Git fetch is a command that updates your local repository with the latest changes from the remote repository. It does this by downloading all of the new commits and files from the remote repository, but it does not merge them into your current branch.

pull:
	git pull is combines git fetch and git merge FETCH_HEAD

	Git pull is a command that combines the functionality of git fetch and git merge. It fetches the latest changes from the remote repository and merges them into the current branch.

	Git pull --ff performs a fast-forward merge. This means that if the current branch is already up to date with the remote branch, Git will simply move the branch pointer to point to the latest remote commit. If the current branch is not up to date with the remote branch, Git will create a merge commit.

	Git pull --no-ff always creates a merge commit, even if the current branch is already up to date with the remote branch.

	git pull merging options:
		--ff (default) fast-forward if possible otherwise perform a merge commit
		--no-ff  always include a merge commit
		--ff-only cancel instead of doing a merge commit
		--rabase [--preserver-merges] 

	git pull with conflicting uncommitted changes
		commit your changes or stash them 

	git pull with safe uncommitted changes:
		is ok


push:
	git push [-u] [<repository>] [<branch>]

	-u track this branch (--set-upstream)
 general rull to pull or fetch before push
